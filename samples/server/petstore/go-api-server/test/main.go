/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"fmt"
	"log"
	"net/http"

	petstoreserver "github.com/GIT_USER_ID/GIT_REPO_ID/go"
)

func main() {
	log.Printf("Server started")

	PetApiService := &PetApiService{} // petstoreserver.NewPetApiService()
	PetApiController := petstoreserver.NewPetApiController(PetApiService)

	router := petstoreserver.NewRouter(PetApiController)

	log.Fatal(http.ListenAndServe(":8080", router))
}

type PetApiService struct {
	*petstoreserver.PetApiService
}

func (*PetApiService) AddPet(ctx context.Context, pet petstoreserver.Pet) (petstoreserver.ImplResponse, error) {
	if pet.ScalarInt32 != 19 && pet.ScalarInt32 != 20 {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected [19, 20], got %d", pet.ScalarInt32)
	}
	if pet.ScalarInt64 != 19 && pet.ScalarInt64 != 20 {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected [19, 20], got %d", pet.ScalarInt64)
	}
	if pet.ScalarFloat32 != 19.19 && pet.ScalarFloat32 != 20.20 {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected [19.19, 20.20], got %f", pet.ScalarFloat32)
	}
	if pet.ScalarFloat64 != 19.19 && pet.ScalarFloat64 != 20.20 {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected [19.19, 20.20], got %f", pet.ScalarFloat64)
	}

	for idx, v := range pet.ArrayInt32 {
		if v != 19 && v != 20 {
			return petstoreserver.Response(407, nil), fmt.Errorf("invalid value (index %d): expected [19, 20], got %d", idx, v)
		}
	}
	for idx, v := range pet.ArrayInt64 {
		if v != 19 && v != 20 {
			return petstoreserver.Response(407, nil), fmt.Errorf("invalid value (index %d): expected [19, 20], got %d", idx, v)
		}
	}
	for idx, v := range pet.ArrayFloat32 {
		if v != 19.19 && v != 20.20 {
			return petstoreserver.Response(407, nil), fmt.Errorf("invalid value (index %d): expected [19.19, 20.20], got %f", idx, v)
		}
	}
	for idx, v := range pet.ArrayFloat64 {
		if v != 19.19 && v != 20.20 {
			return petstoreserver.Response(407, nil), fmt.Errorf("invalid value (index %d): expected [19.19, 20.20], got %f", idx, v)
		}
	}

	if pet.ScalarString != "19" && pet.ScalarString != "20" {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected ['19', '20'], got '%s'", pet.ScalarString)
	}

	if pet.ScalarBoolean != true {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected [true], got %t", pet.ScalarBoolean)
	}

	return petstoreserver.Response(201, nil), nil
}

func (*PetApiService) FindPetsByStatus(ctx context.Context, status []string, scalarInt32 int32, scalarInt64 int64, scalarFloat32 float32, scalarFloat64 float64, arrayInt32 []int32, arrayInt64 []int64, arrayFloat32 []float32, arrayFloat64 []float64, scalarString string, scalarBoolean bool) (petstoreserver.ImplResponse, error) {
	if scalarInt32 != 19 && scalarInt32 != 20 {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected [19, 20], got %d", scalarInt32)
	}
	if scalarInt64 != 19 && scalarInt64 != 20 {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected [19, 20], got %d", scalarInt64)
	}
	if scalarFloat32 != 19.19 && scalarFloat32 != 20.20 {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected [19.19, 20.20], got %f", scalarFloat32)
	}
	if scalarFloat64 != 19.19 && scalarFloat64 != 20.20 {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected [19.19, 20.20], got %f", scalarFloat64)
	}

	for idx, v := range arrayInt32 {
		if v != 19 && v != 20 {
			return petstoreserver.Response(407, nil), fmt.Errorf("invalid value (index %d): expected [19, 20], got %d", idx, v)
		}
	}
	for idx, v := range arrayInt64 {
		if v != 19 && v != 20 {
			return petstoreserver.Response(407, nil), fmt.Errorf("invalid value (index %d): expected [19, 20], got %d", idx, v)
		}
	}
	for idx, v := range arrayFloat32 {
		if v != 19.19 && v != 20.20 {
			return petstoreserver.Response(407, nil), fmt.Errorf("invalid value (index %d): expected [19.19, 20.20], got %f", idx, v)
		}
	}
	for idx, v := range arrayFloat64 {
		if v != 19.19 && v != 20.20 {
			return petstoreserver.Response(407, nil), fmt.Errorf("invalid value (index %d): expected [19.19, 20.20], got %f", idx, v)
		}
	}

	if scalarString != "19" && scalarString != "20" {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected ['19', '20'], got '%s'", scalarString)
	}

	if scalarBoolean != true {
		return petstoreserver.Response(407, nil), fmt.Errorf("invalid value: expected [true], got %t", scalarBoolean)
	}

	return petstoreserver.Response(201, nil), nil
}
