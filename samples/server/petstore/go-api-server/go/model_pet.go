/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package petstoreserver



import "errors" // FIXME: why not in #imports
import "encoding/json" // FIXME: why not in #imports

var _ = errors.New("") // to enforce the use of errors
var _ = json.NewDecoder(nil) // to enforce the use of encoding/json


// Pet - A pet for sale in the pet store
type Pet struct {

	Id int64 `json:"id,omitempty"`

	Category Category `json:"category,omitempty"`

	Name string `json:"name"`

	PhotoUrls []string `json:"photoUrls"`

	Tags []Tag `json:"tags,omitempty"`

	// pet status in the store
	// Deprecated
	Status string `json:"status,omitempty"`

	ScalarInt32 int32 `json:"scalar_int32,omitempty"`

	ScalarInt64 int64 `json:"scalar_int64,omitempty"`

	ScalarFloat32 float32 `json:"scalar_float32,omitempty"`

	ScalarFloat64 float64 `json:"scalar_float64,omitempty"`

	ArrayInt32 []int32 `json:"array_int32,omitempty"`

	ArrayInt64 []int64 `json:"array_int64,omitempty"`

	ArrayFloat32 []float32 `json:"array_float32,omitempty"`

	ArrayFloat64 []float64 `json:"array_float64,omitempty"`

	ScalarString string `json:"scalar_string,omitempty"`

	ScalarBoolean bool `json:"scalar_boolean,omitempty"`
}

// UnmarshalJSON parse JSON while respecting the default values specified
func (o *Pet) UnmarshalJSON(data []byte) error {
    type Alias Pet // Avoid infinite recursion
    aux := Alias{
		ScalarInt32: 19,
		ScalarInt64: 19,
		ScalarFloat32: 19.19,
		ScalarFloat64: 19.19,
		ScalarString: "19",
		ScalarBoolean: true,
	}
    if err := json.Unmarshal(data, &aux); err != nil {
        return err
    }
    *o = Pet(aux)
    return nil
}

// AssertPetRequired checks if the required fields are not zero-ed
func AssertPetRequired(obj Pet) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"photoUrls": obj.PhotoUrls,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCategoryRequired(obj.Category); err != nil {
		return err
	}
	for _, el := range obj.Tags {
		if err := AssertTagRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertPetConstraints checks if the values respects the defined constraints
func AssertPetConstraints(obj Pet) error {
	if obj.ScalarInt32 < 17 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.ScalarInt32 > 42 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.ScalarInt64 < 17 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.ScalarInt64 > 42 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.ScalarFloat32 < 17.17 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.ScalarFloat32 > 42.42 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.ScalarFloat64 < 17.17 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.ScalarFloat64 > 42.42 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}

// AssertRecursePetRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Pet (e.g. [][]Pet), otherwise ErrTypeAssertionError is thrown.
func AssertRecursePetRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPet, ok := obj.(Pet)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertPetRequired(aPet)
	})
}
